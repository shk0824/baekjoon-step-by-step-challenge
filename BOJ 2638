#include<iostream>
#include<queue>
#include <algorithm>
#include <stack>
#include <iomanip>
#include <cmath>
#include <map>
#include <string>
#include <map>
#include <bitset>
using namespace std;
using ll = long long;
#define f(n) for(int i=0;i<n;i++)
#define INF 2000000
bool isp(int row, int col, int Srow, int Scol)
{
	if (row >= 0 && row < Srow&&col >= 0 && col < Scol)
		return true;
	return false;
}
void DFS(int**map, int**touch, int row, int col, int Srow, int Scol,bool**visit)
{
	visit[row][col] = true;
	int dx[4] = { -1,1,0,0 };
	int dy[4] = { 0,0,-1,1 };
	for (int i = 0; i < 4; i++)
	{
		int nextRow = row + dx[i], nextCol = col + dy[i];
		if (isp(nextRow, nextCol, Srow, Scol)&&!visit[nextRow][nextCol])
		{
			if (map[nextRow][nextCol] == 1)
				touch[nextRow][nextCol]++;
			else
				DFS(map, touch, nextRow, nextCol, Srow, Scol, visit);
		}
	}
}

int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	int row, col,time=0;
	cin >> row >> col;
	int**map = new int*[row];
	int**touched = new int*[row];
	bool**visit = new bool*[row];
	for (int i = 0; i < row; i++)
	{
		map[i] = new int[col]();
		touched[i] = new int[col]();
		visit[i] = new bool[col]();
		for (int j = 0; j < col; j++)
			cin >> map[i][j];

	}
	while (1)
	{
		//가장자리는 항상 치즈가 없다고 가정했기 떄문에
		//가장자리에서 시작하여 탐색하며 공기가 치즈에 닿는 부분에
		//마킹을 해둠, 탐색 후, 마킹한 횟수가 2 이상이면 지움
		DFS(map, touched, 0, 0, row, col, visit);
		bool det = false;
		for(int i=0;i<row;i++)
			for (int j = 0; j < col; j++)
			{
				visit[i][j] = false;
				if (touched[i][j] != 0)
				{
					det = true;
					if (touched[i][j] >= 2)
						map[i][j] = 0, touched[i][j] = 0;
					else
						touched[i][j] = 0;
				}
			}
		if (!det)
			break;
		time++;
		//치즈가 없을 때 까지 반복
	}
	cout << time;
}
