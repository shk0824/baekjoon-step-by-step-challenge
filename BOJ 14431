#include <iostream>
#include <queue>
#include <stack>
#include <algorithm>
#include <map>
#include <string>
#include <math.h>
#include <unordered_map>
using namespace std;
typedef pair<int, pair<int, int>>set;
#define INF 70000000
void PrimeNum(bool*prime)//에라토스테네스 체
{
	for (int i = 2; i*i <= 12000; i++)
	{
		if (!prime[i])
		{
			for (int j = i + i; j <= 12000; j += i)
				prime[j] = true;
		}
	}
}
struct Position//좌표 주소
{
	int x;
	int y;
};
void dijkstra(int*dist, int start, int des,deque<pair<int,int>>*list)//다익스트라
{
	
	priority_queue<pair<int, int>, deque<pair<int, int>>, greater<pair<int, int>>>pq;
	pq.push({ 0,start });
	
	dist[start] = 0;
	while (!pq.empty())
	{
		int cur = pq.top().second;
		int curWeight = pq.top().first;
		pq.pop();
		if (curWeight > dist[cur])
			continue;

		for (auto& edge : list[cur])
		{
			int next = edge.second;
			int nextWeight = edge.first + curWeight;
			if (dist[next] > nextWeight)
			{
				dist[next] = nextWeight;
				pq.push({ nextWeight,next });

			}
		}
		
	}
}
int main()
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	int x1, y1, x2, y2;
	cin >> x1 >> y1 >> x2 >> y2;
	int n;
	cin >> n;
	deque<Position>PositionList;
	deque<pair<int,int>>*list = new deque<pair<int, int>>[n + 3]();
	PositionList.push_back({ x1,y1 });
	int*distance = new int[n + 3]();
	for (int i = 1; i <= n + 2; i++)
		distance[i] = INF;
	bool*prime = new bool[12000]();
	PrimeNum(prime);
	for (int i = 0; i < n; i++)
	{
		Position p;
		cin >> p.x >> p.y;
		PositionList.push_back(p);
	}
	PositionList.push_back({ x2,y2 });

	for(int i=0;i<PositionList.size()-1;i++)
		for (int j = i + 1; j < PositionList.size(); j++)//양방향으로 연결관계를 나타내고, 소수 거리만 연결시킴
		{
			int dist = sqrt(pow(PositionList[i].x - PositionList[j].x, 2) + pow(PositionList[i].y - PositionList[j].y, 2));
			if (!prime[dist])
			{
				list[i + 1].push_back({ dist,j + 1 });
				list[j + 1].push_back({ dist,i + 1 });
			}
		}

	dijkstra(distance, 1, n + 2, list);
	if (distance[n + 2] == INF)
		cout << -1;
	else
		cout << distance[n + 2];
}
